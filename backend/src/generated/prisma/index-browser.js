
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.Client_detailsScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  c_parameter_id: 'c_parameter_id',
  value: 'value'
};

exports.Prisma.Client_parameterScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.Client_serviceScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  service_id: 'service_id',
  created: 'created',
  updated: 'updated',
  started: 'started',
  delivery: 'delivery',
  expiry: 'expiry',
  frequency: 'frequency',
  unit: 'unit',
  url_api: 'url_api',
  token_api: 'token_api'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  description: 'description',
  value: 'value',
  url: 'url',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.Invoice_detailScalarFieldEnum = {
  id: 'id',
  invoice_id: 'invoice_id',
  service_id: 'service_id',
  item: 'item',
  quantity: 'quantity',
  total_value: 'total_value',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  role_id: 'role_id',
  client_id: 'client_id',
  user_name: 'user_name',
  ip: 'ip',
  type: 'type',
  detail: 'detail',
  created: 'created'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  code: 'code',
  value: 'value',
  status_pay: 'status_pay',
  method: 'method',
  payment_method_id: 'payment_method_id',
  type: 'type',
  url: 'url',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.Payment_attachmentScalarFieldEnum = {
  id: 'id',
  invoice_id: 'invoice_id'
};

exports.Prisma.Payment_methodScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  section: 'section'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  description: 'description',
  value: 'value',
  url: 'url',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.Quote_attachmentScalarFieldEnum = {
  id: 'id',
  quote_id: 'quote_id',
  invoice_id: 'invoice_id'
};

exports.Prisma.Quote_detailScalarFieldEnum = {
  id: 'id',
  quote_id: 'quote_id',
  service_id: 'service_id',
  item: 'item',
  quantity: 'quantity',
  total_value: 'total_value',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role_category: 'role_category',
  created: 'created',
  updated: 'updated',
  status: 'status',
  description: 'description'
};

exports.Prisma.Role_permissionScalarFieldEnum = {
  id: 'id',
  role_id: 'role_id',
  permission_id: 'permission_id'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  service_category_id: 'service_category_id',
  name: 'name',
  unit: 'unit',
  description: 'description',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.Service_categoryScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.Service_usageScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  service_id: 'service_id',
  start_date: 'start_date',
  end_date: 'end_date',
  usage: 'usage',
  created: 'created',
  status: 'status'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  role_id: 'role_id',
  client_id: 'client_id',
  user: 'user',
  pass: 'pass',
  name: 'name',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  client: 'client',
  client_details: 'client_details',
  client_parameter: 'client_parameter',
  client_service: 'client_service',
  invoice: 'invoice',
  invoice_detail: 'invoice_detail',
  log: 'log',
  payment: 'payment',
  payment_attachment: 'payment_attachment',
  payment_method: 'payment_method',
  permission: 'permission',
  quote: 'quote',
  quote_attachment: 'quote_attachment',
  quote_detail: 'quote_detail',
  role: 'role',
  role_permission: 'role_permission',
  service: 'service',
  service_category: 'service_category',
  service_usage: 'service_usage',
  user: 'user'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
